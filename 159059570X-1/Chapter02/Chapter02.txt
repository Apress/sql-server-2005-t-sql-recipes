--Inserting a Row into a Table

INSERT Production.Location
(Name, CostRate, Availability)
VALUES ('Wheel Storage', 11.25, 80.00)

SELECT Name,
CostRate,
Availability
FROM Production.Location
WHERE Name = 'Wheel Storage'

--Inserting a Row Using Default Values

INSERT Production.Location
(Name, CostRate, Availability, ModifiedDate)
VALUES ('Wheel Storage 2', 11.25, 80.00, '1/1/2005')

INSERT Production.Location
(Name, CostRate, Availability, ModifiedDate)
VALUES ('Wheel Storage 3', 11.25, 80.00, DEFAULT)

--Explicitly Inserting aValue Into an IDENTITY Column

INSERT HumanResources.Department
(DepartmentID, Name, GroupName)
VALUES (17, 'Database Services', 'Information Technology')

SET IDENTITY_INSERT HumanResources.Department ON
INSERT HumanResources.Department
(DepartmentID, Name, GroupName)
VALUES (17, 'Database Services', 'Information Technology')
SET IDENTITY_INSERT HumanResources.Department OFF

--Inserting a Row into a Table with a Uniqueidentifier column

INSERT Purchasing.ShipMethod
(Name, ShipBase, ShipRate, rowguid)
VALUES('MIDDLETON CARGO TS1', 8.99, 1.22, NEWID())

SELECT rowguid, name
FROM Purchasing.ShipMethod

--Inserting Rows Using an INSERT...SELECT statement

INSERT Shift_Archive
(ShiftID, Name, StartTime, EndTime, ModifiedDate)
SELECT ShiftID, Name, StartTime, EndTime, ModifiedDate
FROM HumanResources.Shift
ORDER BY ShiftID

SELECT ShiftID, Name
FROM Shift_Archive

--Inserting data from a Stored Procedure Call

CREATE PROCEDURE usp_SEL_Production_TransactionHistory
@ModifiedStartDT datetime,
@ModifiedEndDT datetime
AS
SELECT TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID,
TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate
FROM Production.TransactionHistory
WHERE ModifiedDate BETWEEN @ModifiedStartDT AND @ModifiedEndDT AND
TransactionID NOT IN
(SELECT TransactionID
FROM Production.TransactionHistoryArchive)
GO

EXEC usp_SEL_Production_TransactionHistory '6/2/04', '6/3/04'

INSERT Production.TransactionHistoryArchive
(TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate,
TransactionType, Quantity, ActualCost, ModifiedDate)
EXEC usp_SEL_Production_TransactionHistory '6/2/04', '6/3/04'

--Updating a Single row

UPDATE Sales.SpecialOffer
SET DiscountPct = 0.15
WHERE SpecialOfferID = 10

SELECT DiscountPct
FROM Sales.SpecialOffer
WHERE SpecialOfferID = 10

--Updating Rows based on a FROM and WHERE Clause

UPDATE Sales.ShoppingCartItem
SET Quantity =2,
ModifiedDate = GETDATE()
FROM Sales.ShoppingCartItem c
INNER JOIN Production.Product p ON
c.ProductID = p.ProductID
WHERE p.Name = 'Full-Finger Gloves, M ' AND
c.Quantity > 2

--Updating Large Value Data Type Columns

CREATE TABLE RecipeChapter
(ChapterID int NOT NULL,
Chapter varchar(max) NOT NULL)

INSERT RecipeChapter
(ChapterID, Chapter)
VALUES
(1, 'At the beginning of each chapter you’ll notice that basic concepts are covered
first.' )

UPDATE RecipeChapter
SET Chapter .WRITE (' In addition to the basics, this chapter will also provide recipes
that can be used in your day to day development and administration.' , NULL, NULL)
WHERE ChapterID = 1

UPDATE RecipeChapter
SET Chapter .WRITE('daily', 178, 10)
WHERE ChapterID = 1

SELECT Chapter
FROM RecipeChapter
WHERE ChapterID = 1
WHERE Name = 'MIDDLETON CARGO TS1'

--Inserting or Updating an Image File Using OPENROWSET and
BULK

CREATE TABLE StockGifs
(StockGifID int NOT NULL,
Gif varbinary(max) NOT NULL)

INSERT StockGifs
(StockGifID, Gif)
SELECT 1,
BulkColumn
FROM OPENROWSET(BULK
'C:\Program Files\Microsoft SQL Server\90\Tools\Binn\VSShell\Common7\
IDE\DataWarehouseDesigner\KPIsBrowserPage\Images\Gauge_Asc0.gif',
SINGLE_BLOB) AS x

SELECT Gif
FROM StockGifs
WHERE StockGifID = 1

UPDATE StockGifs
SET Gif =
(SELECT BulkColumn
FROM OPENROWSET(BULK
'C:\Program Files\Microsoft SQL Server\90\Tools\Binn\VSShell\Common7\IDE\
DataWarehouseDesigner\KPIsBrowserPage\Images\Cylinder2.gif',
SINGLE_BLOB) AS x)
WHERE StockGifID =1

--Deleting Rows

SELECT *
INTO Production.Example_ProductProductPhoto
FROM Production.ProductProductPhoto

-- Repopulate the Example_ProductProductPhoto table
INSERT Production.Example_ProductProductPhoto
SELECT *
FROM Production.ProductProductPhoto

DELETE Production.Example_ProductProductPhoto
WHERE ProductID NOT IN
(SELECT ProductID

DELETE Production.ProductProductPhoto
FROM Production.Example_ProductProductPhoto ppp
LEFT OUTER JOIN Production.Product p ON
ppp.ProductID = p.ProductID
WHERE p.ProductID IS NULL

-Truncating a table

-- First populating the example
SELECT *
INTO Sales.Example_StoreContact
FROM Sales.StoreContact

-- Next, truncating ALL rows from the example table
TRUNCATE TABLE Sales.Example_StoreContact
FROM Production.Product)

SELECT COUNT(*)
FROM Sales.Example_StoreContact

--Using the OUTPUT clause with INSERT,UPDATE, DELETE

DECLARE @ProductChanges TABLE
(DeletedName nvarchar(50),
InsertedName nvarchar(50))

UPDATE Production.Product
SET Name = 'HL Spindle/Axle XYZ'
OUTPUT DELETED.Name,
INSERTED.Name
INTO @ProductChanges
WHERE ProductID = 524

SELECT DeletedName,
InsertedName
FROM @ProductChanges

SELECT *
INTO Sales.Example_SalesTaxRate
FROM Sales.SalesTaxRate

DECLARE @SalesTaxRate TABLE(
[SalesTaxRateID] [int] NOT NULL,
[StateProvinceID] [int] NOT NULL,
[TaxType] [tinyint] NOT NULL,
[TaxRate] [smallmoney] NOT NULL,
[Name] [dbo]. [Name] NOT NULL,
[rowguid] [uniqueidentifier] ,
[ModifiedDate] [datetime] NOT NULL )

DELETE Sales.Example_SalesTaxRate
OUTPUT DELETED.*
INTO @SalesTaxRate

SELECT SalesTaxRateID,
Name
FROM @SalesTaxRate

DECLARE @NewDepartment TABLE
(DepartmentID smallint NOT NULL,
Name nvarchar(50) NOT NULL,
GroupName nvarchar(50) NOT NULL,
ModifiedDate datetime NOT NULL)

INSERT HumanResources.Department
(Name, GroupName)
OUTPUT INSERTED.*
INTO @NewDepartment
VALUES ('Accounts Receivable', 'Accounting')

SELECT DepartmentID,
ModifiedDate
FROM @NewDepartment

--Deleting Rows in Chunks

SELECT *
INTO Production.Example_BillOfMaterials
FROM Production.BillOfMaterials

WHILE (SELECT COUNT(*)FROM Production.Example_BillOfMaterials)> 0
BEGIN
DELETE TOP(500)
FROM Production.Example_BillOfMaterials
END
