-- The Basic SELECT Statement

SELECT select_list
FROM table_list

-- Selecting Specific Columns for Every Row

USE AdventureWorks
GO
SELECT ContactID,
Title,
FirstName,
LastName
FROM Person.Contact

-- Selecting Every Column for Every Row

USE AdventureWorks
GO
SELECT *
FROM Person.Contact

--Using the WHERE clause to specify rows returned in the result set

SELECT Title,
FirstName,
LastName
FROM Person.Contact
WHERE Title = ‘Ms.’

-- Negating a Search Condition

SELECT Title,
FirstName,
LastName
FROM Person.Contact
WHERE NOT Title = 'Ms.'

--Combining Search Conditions

SELECT Title,
FirstName,
LastName
FROM Person.Contact
WHERE Title = 'Ms.' AND
LastName = 'Antrim'

SELECT Title,
FirstName,
LastName
FROM Person.Contact
WHERE Title = 'Ms.' OR
LastName = 'Antrim'

-- Keeping your WHERE Clause Unambiguous

SELECT Title,
FirstName,
LastName
FROM Person.Contact
WHERE Title = 'Ms.' AND
FirstName = 'Catherine' OR
LastName = 'Adams'

SELECT ContactID,
Title,
FirstName,
MiddleName,
LastName
FROM Person.Contact
WHERE (Title = 'Ms.' AND
FirstName = 'Catherine') OR
LastName = 'Adams'

-- Using BETWEEN for Date Range Searches

SELECT SalesOrderID,
ShipDate
FROM Sales.SalesOrderHeader
WHERE ShipDate BETWEEN '7/28/2002' AND '7/29/2002'

-- Using Comparisons

SELECT ProductID,
Name,
StandardCost
FROM Production.Product
WHERE StandardCost < 110.0000

--Checking for NULL Values

SELECT ProductID,
Name,
Weight
FROM Production.Product
WHERE Weight IS NULL

--Returning Rows based on a List of Values

SELECT ProductID,
Name,
Color
FROM Production.Product
WHERE Color IN ('Silver', 'Black', 'Red')

--Using Wildcards with LIKE

SELECT ProductID,
Name
FROM Production.Product
WHERE Name LIKE 'B%'

SELECT ProductID,
Name
FROM Production.Product
WHERE Name LIKE '%/_%' ESCAPE '/'

--Using the ORDER BY clause

SELECT p.Name,
h.EndDate,
h.ListPrice
FROM Production.Product p
INNER JOIN Production.ProductListPriceHistory h ON
p.ProductID = h.ProductID
ORDER BY p.Name, h.EndDate

SELECT p.Name,
h.EndDate,
h.ListPrice
FROM Production.Product p
INNER JOIN Production.ProductListPriceHistory h ON
p.ProductID = h.ProductID
ORDER BY p.Name DESC, h.EndDate DESC

SELECT p.Name
FROM Production.Product p
ORDER BY p.Color

-- Using the TOP keyword with Ordered Results

SELECT TOP 10 v.Name,
v.CreditRating
FROM Purchasing.Vendor v
ORDER BY v.CreditRating DESC, v.Name

DECLARE @Percentage float
SET @Percentage = 1
SELECT TOP (@Percentage) PERCENT
Name
FROM Production.Product
ORDER BY Name

-- Using the GROUP BY Clause

SELECT OrderDate,
SUM(TotalDue) TotalDueByOrderDate
FROM Sales.SalesOrderHeader
WHERE OrderDate BETWEEN '7/1/2001' AND '7/31/2001'
GROUP BY OrderDate

-- Using GROUP BY ALL

SELECT OrderDate,
SUM(TotalDue) TotalDueByOrderDate
FROM Sales.SalesOrderHeader
WHERE OrderDate BETWEEN '7/1/2001' AND '7/31/2001'
GROUP BY ALL OrderDate

-- Selectively Query Grouped data using HAVING

SELECT s.Name,
COUNT(w.WorkOrderID) Cnt
FROM Production.ScrapReason s
INNER JOIN Production.WorkOrder w ON
s.ScrapReasonID = w.ScrapReasonID
GROUP BY s.Name
HAVING COUNT(*)>50

-- Using DISTINCT to Remove Duplicate Values

SELECT DISTINCT HireDate
FROM HumanResources.Employee

-- Using DISTINCT in Aggregate Functions

SELECT AVG(ListPrice)
FROM Production.Product

SELECT AVG(DISTINCT ListPrice)
FROM Production.Product

-- Using Column Aliases

SELECT Color AS 'Grouped Color',
AVG(DISTINCT ListPrice) AS 'Average Distinct List Price',
AVG(ListPrice) 'Average List Price'
FROM Production.Product
GROUP BY Color

-- Using SELECT to Create a Script

SELECT column_name + ' IS NULL AND '
FROM INFORMATION_SCHEMA.columns
WHERE table_name = 'Employee'
ORDER BY ORDINAL_POSITION

-- Performing String Concatenation

SELECT 'The ' +
p.name +
' is only ' +
CONVERT(varchar(25),p.ListPrice) +
'!'
FROM Production.Product p
WHERE p.ListPrice between 100 AND 120
ORDER BY p.ListPrice

-- Creating a Comma Delimited List using SELECT

DECLARE @Shifts varchar(20)
SET @Shifts = ''
SELECT @Shifts = @Shifts + s.Name + ','
FROM HumanResources.Shift s
ORDER BY s.EndTime
SELECT @Shifts

-- Using the INTO Clause

SELECT CustomerID,
Name,
SalesPersonID,
Demographics
INTO Store_Archive
FROM Sales.Store

SELECT CustomerID,
Name,
SalesPersonID,
Demographics
INTO Store_Archive
FROM Sales.Store
WHERE 1=0

-- Using Subqueries to Check for the Existence of Matches

SELECT DISTINCT s.PurchaseOrderNumber
FROM Sales.SalesOrderHeader s
WHERE EXISTS ( SELECT SalesOrderID
FROM Sales.SalesOrderDetail
WHERE UnitPrice BETWEEN 1000 AND 2000 AND
SalesOrderID = s.SalesOrderID)

SELECT SalesPersonID,
SalesQuota CurrentSalesQuota
FROM Sales.SalesPerson
WHERE SalesQuota IN
(SELECT MAX(SalesQuota)
FROM Sales.SalesPerson)

-- Using INNER Joins

SELECT p.Name,
s.DiscountPct
FROM Sales.SpecialOffer s
INNER JOIN Sales.SpecialOfferProduct o ON
s.SpecialOfferID = o.SpecialOfferID
INNER JOIN Production.Product p ON
o.ProductID = p.ProductID
WHERE p.Name = 'All-Purpose Bike Stand'


-- Using OUTER Joins

SELECT s.CountryRegionCode,
s.StateProvinceCode,
t.TaxType,
t.TaxRate
FROM Person.StateProvince s
INNER JOIN Sales.SalesTaxRate t ON
s.StateProvinceID = t.StateProvinceID

SELECT s.CountryRegionCode,
s.StateProvinceCode,
t.TaxType,
t.TaxRate
FROM Person.StateProvince s
LEFT OUTER JOIN Sales.SalesTaxRate t ON
s.StateProvinceID = t.StateProvinceID

-- Using CROSS Joins

SELECT s.CountryRegionCode,
s.StateProvinceCode,
t.TaxType,
t.TaxRate
FROM Person.StateProvince s
CROSS JOIN Sales.SalesTaxRate t

-- Performing Self-Joins

SELECT e.EmployeeID,
e.Title,
m.Title AS ManagerTitle
FROM HumanResources.Employee e
LEFT OUTER JOIN HumanResources.Employee m ON
e.ManagerID = m.EmployeeID

--Using Derived Tables

SELECT DISTINCT s.PurchaseOrderNumber
FROM Sales.SalesOrderHeader s
INNER JOIN (SELECT SalesOrderID
FROM Sales.SalesOrderDetail
WHERE UnitPrice BETWEEN 1000 AND 2000) d ON
s.SalesOrderID = d.SalesOrderID

-- Combine Result Sets with UNION

SELECT SalesPersonID, GETDATE() QuotaDate, SalesQuota
FROM Sales.SalesPerson
WHERE SalesQuota > 0
UNION
SELECT SalesPersonID, QuotaDate, SalesQuota
FROM Sales.SalesPersonQuotaHistory
WHERE SalesQuota > 0
ORDER BY SalesPersonID DESC, QuotaDate DESC

-- Using CROSS APPLY

CREATE FUNCTION dbo.fn_WorkOrderRouting
(@WorkOrderID int) RETURNS TABLE
AS
RETURN
SELECT WorkOrderID,
ProductID,
OperationSequence,
LocationID
FROM Production.WorkOrderRouting
WHERE WorkOrderID = @WorkOrderID
GO

SELECT w.WorkOrderID,
w.OrderQty,
r.ProductID,
r.OperationSequence
FROM Production.WorkOrder w
CROSS APPLY dbo.fn_WorkOrderRouting
(w.WorkOrderID) AS r
ORDER BY w.WorkOrderID,
w.OrderQty,
r.ProductID

--Using OUTER APPLY

INSERT INTO [AdventureWorks].[Production].[WorkOrder]
([ProductID]
,[OrderQty]
,[ScrappedQty]
,[StartDate]
,[EndDate]
,[DueDate]
,[ScrapReasonID]
,[ModifiedDate])
VALUES
(1,
1,
1,
GETDATE(),
GETDATE(),
GETDATE(),
1,
GETDATE())

SELECT w.WorkOrderID,
w.OrderQty,
r.ProductID,
r.OperationSequence
FROM Production.WorkOrder AS w
CROSS APPLY dbo.fn_WorkOrderRouting
(w.WorkOrderID) AS r
WHERE w.WorkOrderID IN
(SELECT MAX(WorkOrderID)
FROM Production.WorkOrder)

SELECT w.WorkOrderID,
w.OrderQty,
r.ProductID,
r.OperationSequence
FROM Production.WorkOrder AS w
OUTER APPLY dbo.fn_WorkOrderRouting
(w.WorkOrderID) AS r
WHERE w.WorkOrderID IN
(SELECT MAX(WorkOrderID)
FROM Production.WorkOrder)

-- Using the TABLESAMPLE to Return Random Rows

SELECT FirstName,LastName
FROM Person.Contact TABLESAMPLE SYSTEM (1 PERCENT)

--Using PIVOT to Convert Single Column Values into Multiple
Columns and Aggregate Data

SELECT s.Name ShiftName,
h.EmployeeID,
d.Name DepartmentName
FROM HumanResources.EmployeeDepartmentHistory h
INNER JOIN HumanResources.Department d ON
h.DepartmentID = d.DepartmentID
INNER JOIN HumanResources.Shift s ON
h.ShiftID = s.ShiftID
WHERE EndDate IS NULL AND
d.Name IN ('Production', 'Engineering', 'Marketing')
ORDER BY ShiftName

SELECT ShiftName,
Production,
Engineering,
Marketing
FROM
(SELECT s.Name ShiftName,
h.EmployeeID,
d.Name DepartmentName
FROM HumanResources.EmployeeDepartmentHistory h
INNER JOIN HumanResources.Department d ON
h.DepartmentID = d.DepartmentID
INNER JOIN HumanResources.Shift s ON
h.ShiftID = s.ShiftID
WHERE EndDate IS NULL AND
d.Name IN ('Production', 'Engineering', 'Marketing')) AS a
PIVOT
(
COUNT(EmployeeID)
FOR DepartmentName IN ([Production], [Engineering], [Marketing]))
AS b
ORDER BY ShiftName

-- Normalizing Data with UNPIVOT

CREATE TABLE dbo.Contact
(EmployeeID int NOT NULL,
PhoneNumber1 bigint,
PhoneNumber2 bigint,
PhoneNumber3 bigint)
GO
INSERT dbo.Contact
(EmployeeID, PhoneNumber1, PhoneNumber2, PhoneNumber3)
VALUES( 1, 2718353881, 3385531980, 5324571342)
INSERT dbo.Contact
(EmployeeID, PhoneNumber1, PhoneNumber2, PhoneNumber3)
VALUES( 2, 6007163571, 6875099415, 7756620787)
INSERT dbo.Contact
(EmployeeID, PhoneNumber1, PhoneNumber2, PhoneNumber3)
VALUES( 3, 9439250939, NULL, NULL)

SELECT EmployeeID,
PhoneType,
PhoneValue
FROM
(SELECT EmployeeID, PhoneNumber1, PhoneNumber2, PhoneNumber3
FROM dbo.Contact) c
UNPIVOT
(PhoneValue FOR PhoneType IN ([PhoneNumber1], [PhoneNumber2], [PhoneNumber3])
) AS p

-- Returning Distinct or Matching Rows using EXCEPT and
INTERSECT

-- First two new tables based on ProductionProduct will be
-- created, in order to demonstrate EXCEPT and INTERSECT.
-- See Chapter 8for more on ROW_NUMBER
-- Create TableA
SELECT prod.ProductID,
prod.Name
INTO dbo.TableA
FROM
(SELECT ProductID,
Name,
ROW_NUMBER() OVER (ORDER BY ProductID) RowNum
FROM Production.Product) prod
WHERE RowNum BETWEEN 1 and 20
-- Create TableB
SELECT prod.ProductID,
prod.Name
INTO dbo.TableB
FROM
(SELECT ProductID,
Name,
ROW_NUMBER() OVER (ORDER BY ProductID) RowNum
FROM Production.Product) prod
WHERE RowNum BETWEEN 10 and 29

SELECT ProductID,
Name
FROM TableA
EXCEPT
SELECT ProductID,
Name
FROM TableB

SELECT ProductID,
Name
FROM TableA
INTERSECT
SELECT ProductID,
Name
FROM TableB

--Summarizing Data with CUBE

SELECT i.Shelf,
SUM(i.Quantity) Total
FROM Production.ProductInventory i
GROUP BY i.Shelf
WITH CUBE

--Using GROUPING with CUBE

SELECT i.Shelf,
GROUPING(i.Shelf) Source,
SUM(i.Quantity) Total
FROM Production.ProductInventory i
GROUP BY i.Shelf
WITH CUBE

--Summarizing Data with ROLLUP

SELECT i.Shelf,
p.Name,
SUM(i.Quantity) Total
FROM Production.ProductInventory i
INNER JOIN Production.Product p ON
i.ProductID = p.ProductID
GROUP BY i.Shelf, p.Name
WITH ROLLUP

-- Using Join Hints

-- (More on SHOWPLAN_TEXT in Chapter 28
SET SHOWPLAN_TEXT ON
GO
SELECT p.Name,
r.ReviewerName,
r.Rating
FROM Production.Product p
INNER JOIN Production.ProductReview r ON
r.ProductID = p.ProductID
GO
SET SHOWPLAN_TEXT OFF
GO

SET SHOWPLAN_TEXT ON
GO
SELECT p.Name,
r.ReviewerName,
r.Rating
FROM Production.Product p
INNER HASH JOIN Production.ProductReview r ON
r.ProductID = p.ProductID
GO
SET SHOWPLAN_TEXT OFF
GO

-- Using Query Hints

SELECT SalesOrderID,
ProductID,
UnitPrice,
OrderQty
FROM Sales.SalesOrderDetail
WHERE CarrierTrackingNumber = '5CE9-4D75-8F'
ORDER BY SalesOrderID,
ProductID
OPTION (RECOMPILE)

-- Using Table Hints

SELECT DocumentID,
Title
FROM Production.Document
WITH (NOLOCK)
WHERE Status = 1

-- Using a Non-Recursive Common Table Expression (CTE)

WITH VendorSearch (RowNumber, VendorName, AccountNumber)
AS
(
SELECT ROW_NUMBER() OVER (ORDER BY Name) RowNum,
Name,
AccountNumber
FROM Purchasing.Vendor
)
SELECT RowNumber,
VendorName,
AccountNumber
FROM VendorSearch
WHERE RowNumber BETWEEN 1 AND 5
UNION
SELECT RowNumber,
VendorName,
AccountNumber
FROM VendorSearch
WHERE RowNumber BETWEEN 100 AND 104

WITH VendorSearch (VendorID, VendorName)
AS
(
SELECT VendorID,
Name
FROM Purchasing.Vendor
)
SELECT v.VendorID,
v.VendorName,
p.ProductID,
p.StandardPrice
FROM VendorSearch v
INNER JOIN Purchasing.ProductVendor p ON
v.VendorID = p.VendorID
ORDER BY v.VendorName

--Using a Recursive Common Table Expression (CTE)

CREATE TABLE dbo.Company
(CompanyID int NOT NULL PRIMARY KEY,
ParentCompanyID int NULL,
CompanyName varchar(25) NOT NULL)

INSERT dbo.Company (CompanyID, ParentCompanyID, CompanyName)
VALUES (1, NULL, 'Mega-Corp')
INSERT dbo.Company (CompanyID, ParentCompanyID, CompanyName)
VALUES (2, 1, 'Mediamus-Corp')
INSERT dbo.Company (CompanyID, ParentCompanyID, CompanyName)
VALUES (3, 1, 'KindaBigus-Corp')
INSERT dbo.Company (CompanyID, ParentCompanyID, CompanyName)
VALUES (4, 3, 'GettinSmaller-Corp')
INSERT dbo.Company (CompanyID, ParentCompanyID, CompanyName)
VALUES (5, 4, 'Smallest-Corp')
INSERT dbo.Company (CompanyID, ParentCompanyID, CompanyName)
VALUES (6, 5, 'Puny-Corp')
INSERT dbo.Company (CompanyID, ParentCompanyID, CompanyName)
VALUES (7, 5, 'Small2-Corp')

WITH CompanyTree(ParentCompanyID, CompanyID, CompanyName, CompanyLevel)
AS
(
SELECT ParentCompanyID,
CompanyID,
CompanyName,
0 AS CompanyLevel
FROM dbo.Company
WHERE ParentCompanyID IS NULL
UNION ALL
SELECT c.ParentCompanyID,
c.CompanyID,
c.CompanyName,
p.CompanyLevel + 1
FROM dbo.Company c
INNER JOIN CompanyTree p
ON c.ParentCompanyID = p.CompanyID
)
SELECT ParentCompanyID, CompanyID, CompanyName, CompanyLevel
FROM CompanyTree


