--Create a Table Index

CREATE TABLE HumanResources.TerminationReason(
TerminationReasonID smallint IDENTITY(1,1) NOT NULL,
TerminationReason varchar(50) NOT NULL,
DepartmentID smallint NOT NULL,
CONSTRAINT FK_TerminationReason_DepartmentID
FOREIGN KEY (DepartmentID) REFERENCES
HumanResources.Department(DepartmentID)
)
GO

ALTER TABLE HumanResources.TerminationReason
ADD CONSTRAINT PK_TerminationReason PRIMARY KEY CLUSTERED (TerminationReasonID)

CREATE NONCLUSTERED INDEX NCI_TerminationReason_DepartmentID ON
HumanResources.TerminationReason (DepartmentID)

--Enforce Uniqueness on Non-Key Columns

CREATE UNIQUE NONCLUSTERED INDEX UNI_TerminationReason ON
HumanResources.TerminationReason (TerminationReason)

INSERT HumanResources.TerminationReason
(DepartmentID, TerminationReason)
VALUES (1, 'Bad Engineering Skills')

INSERT HumanResources.TerminationReason
(DepartmentID, TerminationReason)
VALUES (2, 'Breaks Expensive Tools')

INSERT HumanResources.TerminationReason
(DepartmentID, TerminationReason)
VALUES (2, 'Bad Engineering Skills')

SELECT TerminationReasonID, TerminationReason, DepartmentID
FROM HumanResources.TerminationReason

--Create a Composite Index

CREATE NONCLUSTERED INDEX NI_TerminationReason_TerminationReason_DepartmentID
ON HumanResources.TerminationReason(TerminationReason, DepartmentID)

--Define Index Column Sort Direction

ALTER TABLE HumanResources.TerminationReason
ADD ViolationSeverityLevel smallint
GO
CREATE NONCLUSTERED INDEX NI_TerminationReason_ViolationSeverityLevel
ON HumanResources.TerminationReason (ViolationSeverityLevel DESC)

--View Index Meta Data

EXEC sp_helpindex 'HumanResources.Employee'

SELECT SUBSTRING(name, 1,30) index_name,
allow_row_locks,
allow_page_locks,
is_disabled,
fill_factor
FROM sys.indexes
WHERE object_id = OBJECT_ID('HumanResources.Employee')

--Disable an Index

ALTER INDEX UNI_TerminationReason ON
HumanResources.TerminationReason DISABLE

--Dropping Indexes
DROP INDEX HumanResources.TerminationReason.UNI_TerminationReason
GO

--Change an Existing Index with DROP_EXISTING

CREATE NONCLUSTERED INDEX NCI_TerminationReason_DepartmentID ON
HumanResources.TerminationReason
(DepartmentID ASC)
WITH (DROP_EXISTING = ON)
GO

CREATE NONCLUSTERED INDEX NCI_TerminationReason_DepartmentID ON
HumanResources.TerminationReason
(ViolationSeverityLevel, DepartmentID DESC)
WITH (DROP_EXISTING = ON)
GO

--Intermediate Index Creation in Tempdb

CREATE NONCLUSTERED INDEX NI_Address_PostalCode ON
Person.Address (PostalCode)
WITH (SORT_IN_TEMPDB = ON)

--Control Parallel Plan Execution for Index Creation

CREATE NONCLUSTERED INDEX NI_Contact_Phone ON
Person.Contact(Phone)
WITH (MAXDOP = 4)

--Allow User Table Access During Index Creation

CREATE NONCLUSTERED INDEX NCI_ProductVendor_MinOrderQty ON
Purchasing.ProductVendor(MinOrderQty)
WITH (ONLINE = ON)

-- Using an Index INCLUDE

ALTER TABLE HumanResources.TerminationReason
ADD LegalDescription varchar(max)

DROP INDEX HumanResources.TerminationReason.NI_TerminationReason_
TerminationReason_DepartmentID
GO

CREATE NONCLUSTERED INDEX NI_TerminationReason_TerminationReason_DepartmentID
ON HumanResources.TerminationReason (TerminationReason, DepartmentID)
INCLUDE (LegalDescription)

--Use PAD_INDEX and FILLFACTOR
DROP INDEX HumanResources.TerminationReason.NI_TerminationReason_TerminationReason_DepartmentID
GO

CREATE NONCLUSTERED INDEX NI_TerminationReason_TerminationReason_DepartmentID
ON HumanResources.TerminationReason
(TerminationReason ASC, DepartmentID ASC)
WITH (FILLFACTOR=50, PAD_INDEX=ON)

--Disable Page and/or Row Index Locking

-- Disable page locks. Table and row locks can still be used.
CREATE INDEX NI_EmployeePayHistory_Rate ON
HumanResources.EmployeePayHistory (Rate)
WITH (ALLOW_PAGE_LOCKS=OFF)
GO

-- Disable page and row locks. Only table locks can be used.
ALTER INDEX NI_EmployeePayHistory_Rate ON
HumanResources.EmployeePayHistory
SET (ALLOW_PAGE_LOCKS=OFF,ALLOW_ROW_LOCKS=OFF )
GO

-- Allow page and row locks.
ALTER INDEX NI_EmployeePayHistory_Rate ON
HumanResources.EmployeePayHistory
SET (ALLOW_PAGE_LOCKS=ON,ALLOW_ROW_LOCKS=ON )
GO

--Creating an Index on a Filegroup

ALTER DATABASE AdventureWorks
ADD FILEGROUP FG2
GO

ALTER DATABASE AdventureWorks
ADD FILE
( NAME = AW2,
FILENAME = 'c:\Program Files\Microsoft SQL Server\MSSQL.1\MSSQL\Data\aw2.ndf',
SIZE = 1MB
)
TO FILEGROUP FG2
GO

CREATE INDEX NI_ProductPhoto_ThumnailPhotoFileName ON
Production.ProductPhoto (ThumbnailPhotoFileName)
ON [FG2]

--Implement Index Partitioning

CREATE NONCLUSTERED INDEX NI_WebSiteHits_WebSitePage ON
Sales.WebSiteHits (WebSitePage)
ON [HitDateRangeScheme] (HitDate)