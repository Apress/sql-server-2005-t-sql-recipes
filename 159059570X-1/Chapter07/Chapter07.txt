--Creating a Basic View

CREATE VIEW dbo.v_Product_TransactionHistory
AS
SELECT p.Name ProductName,
p.ProductNumber,
c.Name ProductCategory,
s.Name ProductSubCategory,
m.Name ProductModel,
t.TransactionID,
t.ReferenceOrderID,
t.ReferenceOrderLineID,
t.TransactionDate,
t.TransactionType,
t.Quantity,
t.ActualCost
FROM Production.TransactionHistory t
INNER JOIN Production.Product p ON
t.ProductID = p.ProductID
INNER JOIN Production.ProductModel m ON
m.ProductModelID = p.ProductModelID
INNER JOIN Production.ProductSubcategory s ON
s.ProductSubcategoryID = p.ProductSubcategoryID
INNER JOIN Production.ProductCategory c ON
c.ProductCategoryID = s.ProductCategoryID
WHERE c.Name = 'Bikes'
GO

SELECT ProductName, ProductModel, ReferenceOrderID, TransactionDate, ActualCost
FROM v_Product_TransactionHistory
ORDER BY ProductName

--Querying the View Definition

SELECT definition FROM sys.sql_modules
WHERE object_id = OBJECT_ID('v_Product_TransactionHistory')

--Reporting on Database Views

SELECT s.name SchemaName,
v.name ViewName
FROM sys.views v
INNER JOIN sys.schemas s ON
v.schema_id = s.schema_id
ORDER BY s.name,
v.name

SELECT v.name ViewName,
c.name ColumnName
FROM sys.columns c
INNER JOIN sys.views v ON
c.object_id = v.object_id
ORDER BY v.name,
c.name

SELECT DISTINCT
s.name SchemaName,
v.name ViewName,
OBJECT_NAME(referenced_major_id) ReferencedObject
FROM sys.sql_dependencies d
INNER JOIN sys.views v ON
d.object_id = v.object_id
INNER JOIN sys.schemas s ON
v.schema_id = s.schema_id
ORDER BY s.name, v.name

--Refreshing aView’s Definition

EXEC sp_refreshview 'dbo.v_Product_TransactionHistory'

--Modifying aView

-- Add a WHERE clause and remove
-- the ReferenceOrderID and ReferenceOrderLineID columns
ALTER VIEW dbo.v_Product_TransactionHistory
AS
SELECT p.Name,
p.ProductNumber,
t.TransactionID,
t.TransactionDate,
t.TransactionType,
t.Quantity,
t.ActualCost
FROM Production.TransactionHistory t
INNER JOIN Production.Product p ON
t.ProductID = p.ProductID
WHERE Quantity > 10
GO

--Dropping aView

DROP VIEW dbo.v_Product_Inventory_Location

--Modifying Data Through as View

CREATE VIEW Production.vw_Location
AS
SELECT LocationID,
Name LocationName,
CostRate,
Availability,
CostRate/Availability CostToAvailabilityRatio
FROM Production.Location
GO

INSERT Production.vw_Location
(LocationName, CostRate, Availability, CostToAvailabilityRatio)
VALUES ('Finishing Cabinet', 1.22, 75.00, 0.01626 )

INSERT Production.vw_Location
(LocationName, CostRate, Availability)
VALUES ('Finishing Cabinet', 1.22, 75.00)

--Encrypting aView

CREATE VIEW dbo.v_Product_TopTenListPrice
WITH ENCRYPTION
AS
SELECT TOP 10
p.Name,
p.ProductNumber,
p.ListPrice
FROM Production.Product p
ORDER BY p.ListPrice DESC
GO

SELECT definition
FROM sys.sql_modules
WHERE object_id = OBJECT_ID('v_Product_TopTenListPrice')

--Creating an Indexed View


CREATE VIEW dbo.v_Product_Sales_By_LineTotal
WITH SCHEMABINDING
AS
SELECT p.ProductID, p.Name ProductName, SUM(LineTotal) LineTotalByProduct, COUNT_BIG(*)
LineItems
FROM Sales.SalesOrderDetail s
INNER JOIN Production.Product p ON
s.ProductID = p.ProductID
GROUP BY p.ProductID, p.Name
GO

SET STATISTICS IO ON
GO
SELECT TOP 5 ProductName, LineTotalByProduct
FROM v_Product_Sales_By_LineTotal
ORDER BY LineTotalByProduct DESC

CREATE UNIQUE CLUSTERED INDEX UCI_v_Product_Sales_By_LineTotal
ON dbo.v_Product_Sales_By_LineTotal (ProductID)
GO

CREATE NONCLUSTERED INDEX NI_v_Product_Sales_By_LineTotal
ON dbo.v_Product_Sales_By_LineTotal (ProductName)
GO

SELECT TOP 5 ProductName, LineTotalByProduct
FROM v_Product_Sales_By_LineTotal
ORDER BY LineTotalByProduct DESC

--Forcing the Optimizer to use an Index for an Indexed View

SELECT ProductID, LocationID, ProductName, LocationName, Shelf
FROM dbo.v_Product_Inventory_Location
WITH (NOEXPAND)
WHERE ProductName = 'Blade'

SELECT ProductID, LocationID, ProductName, LocationName, Shelf
FROM dbo.v_Product_Inventory_Location
WITH (NOEXPAND, INDEX(NI_v_Product_Inventory_Location_Names))
WHERE ProductName = 'Blade'

